/**
 *  "TRMSim-WSN, Trust and Reputation Models Simulator for Wireless
 * Sensor Networks" is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version always keeping
 * the additional terms specified in this license.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 *
 * Additional Terms of this License
 * --------------------------------
 *
 * 1. It is Required the preservation of specified reasonable legal notices
 *   and author attributions in that material and in the Appropriate Legal
 *   Notices displayed by works containing it.
 *
 * 2. It is limited the use for publicity purposes of names of licensors or
 *   authors of the material.
 *
 * 3. It is Required indemnification of licensors and authors of that material
 *   by anyone who conveys the material (or modified versions of it) with
 *   contractual assumptions of liability to the recipient, for any liability
 *   that these contractual assumptions directly impose on those licensors
 *   and authors.
 *
 * 4. It is Prohibited misrepresentation of the origin of that material, and it is
 *   required that modified versions of such material be marked in reasonable
 *   ways as different from the original version.
 *
 * 5. It is Declined to grant rights under trademark law for use of some trade
 *   names, trademarks, or service marks.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program (lgpl.txt).  If not, see <http://www.gnu.org/licenses/>
*/

package es.ants.felixgm.trmsim_wsn.gui.parameterpanels;

import es.ants.felixgm.trmsim_wsn.trm.TRMParameters;
import es.ants.felixgm.trmsim_wsn.trm.powertrust.PowerTrust_Parameters;

/**
 * <p>This class represents the panel used to retrieve the parameters of PowerTrust</p>
 * @author <a href="http://ants.dif.um.es/~felixgm/en" target="_blank">F&eacute;lix G&oacute;mez M&aacute;rmol</a>, <a href="http://webs.um.es/gregorio" target="_blank">Gregorio Mart&iacute;nez P&eacute;rez</a>
 * @version 0.3
 * @since 0.3
 */
public class PowerTrust_ParametersPanel extends TRMParametersPanel {

    /** Creates new form PowerTrust_ParametersPanel */
    public PowerTrust_ParametersPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        powerNodesPercentageLabel = new javax.swing.JLabel();
        powerNodesPercentageSlider = new javax.swing.JSlider();
        powerNodesPercentageTextField = new javax.swing.JTextField();
        powerNodesWeightLabel = new javax.swing.JLabel();
        powerNodesWeightSlider = new javax.swing.JSlider();
        powerNodesWeightTextField = new javax.swing.JTextField();
        epsilonLabel = new javax.swing.JLabel();
        epsilonSlider = new javax.swing.JSlider();
        epsilonTextField = new javax.swing.JTextField();

        powerNodesPercentageLabel.setText("Power Nodes Percentage ");
        powerNodesPercentageLabel.setEnabled(false);

        powerNodesPercentageSlider.setMaximum(10000);
        powerNodesPercentageSlider.setValue(100);
        powerNodesPercentageSlider.setEnabled(false);
        powerNodesPercentageSlider.setPreferredSize(new java.awt.Dimension(140, 25));
        powerNodesPercentageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                powerNodesPercentageSliderStateChanged(evt);
            }
        });

        powerNodesPercentageTextField.setEditable(false);
        powerNodesPercentageTextField.setText("0.0100");
        powerNodesPercentageTextField.setPreferredSize(new java.awt.Dimension(45, 25));

        powerNodesWeightLabel.setText(" Power Nodes Weight");
        powerNodesWeightLabel.setEnabled(false);

        powerNodesWeightSlider.setMaximum(10000);
        powerNodesWeightSlider.setValue(1500);
        powerNodesWeightSlider.setEnabled(false);
        powerNodesWeightSlider.setPreferredSize(new java.awt.Dimension(140, 25));
        powerNodesWeightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                powerNodesWeightSliderStateChanged(evt);
            }
        });

        powerNodesWeightTextField.setEditable(false);
        powerNodesWeightTextField.setText("0.1500");
        powerNodesWeightTextField.setPreferredSize(new java.awt.Dimension(45, 25));

        epsilonLabel.setText("Epsilon");
        epsilonLabel.setEnabled(false);

        epsilonSlider.setMaximum(10000);
        epsilonSlider.setValue(1);
        epsilonSlider.setEnabled(false);
        epsilonSlider.setPreferredSize(new java.awt.Dimension(140, 25));
        epsilonSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                epsilonSliderStateChanged(evt);
            }
        });

        epsilonTextField.setEditable(false);
        epsilonTextField.setText("0.0001");
        epsilonTextField.setPreferredSize(new java.awt.Dimension(45, 25));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(powerNodesPercentageLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(powerNodesPercentageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(powerNodesPercentageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(powerNodesWeightLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(powerNodesWeightSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(powerNodesWeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(epsilonLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(epsilonSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(epsilonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(powerNodesPercentageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(powerNodesPercentageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(powerNodesPercentageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(powerNodesWeightLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(powerNodesWeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(powerNodesWeightSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(epsilonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(epsilonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(epsilonSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void powerNodesPercentageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_powerNodesPercentageSliderStateChanged
        powerNodesPercentageTextField.setText(String.valueOf(powerNodesPercentageSlider.getValue()/(double)powerNodesPercentageSlider.getMaximum()));
}//GEN-LAST:event_powerNodesPercentageSliderStateChanged

    private void powerNodesWeightSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_powerNodesWeightSliderStateChanged
        powerNodesWeightTextField.setText(String.valueOf(powerNodesWeightSlider.getValue()/(double)powerNodesWeightSlider.getMaximum()));
}//GEN-LAST:event_powerNodesWeightSliderStateChanged

    private void epsilonSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_epsilonSliderStateChanged
        epsilonTextField.setText(String.valueOf(epsilonSlider.getValue()/(double)epsilonSlider.getMaximum()));
}//GEN-LAST:event_epsilonSliderStateChanged

    /**
     * Retrieves powerNodesPercentage parameter from its corresponding field in the panel
     * @return powerNodesPercentage parameter
     */
    protected double get_powerNodesPercentage() {
        return Double.valueOf(powerNodesPercentageTextField.getText());
    }

    /**
     * Sets powerNodesPercentage parameter into its corresponding field in the panel
     * @param powerNodesPercentage powerNodesPercentage parameter value to be set
     */
    protected void set_powerNodesPercentage(double powerNodesPercentage) {
        powerNodesPercentageSlider.setValue((int)(powerNodesPercentage*powerNodesPercentageSlider.getMaximum()));
    }

    /**
     * Retrieves powerNodesWeight parameter from its corresponding field in the panel
     * @return powerNodesWeight parameter
     */
    protected double get_powerNodesWeight() {
        return Double.valueOf(powerNodesWeightTextField.getText());
    }

    /**
     * Sets powerNodesWeight parameter into its corresponding field in the panel
     * @param powerNodesWeight powerNodesWeight parameter value to be set
     */
    protected void set_powerNodesWeight(double powerNodesWeight) {
        powerNodesWeightSlider.setValue((int)(powerNodesWeight*powerNodesWeightSlider.getMaximum()));
    }

    /**
     * Retrieves epsilon parameter from its corresponding field in the panel
     * @return epsilon parameter
     */
    protected double get_epsilon() {
        return Double.valueOf(epsilonTextField.getText());
    }

    /**
     * Sets epsilon parameter into its corresponding field in the panel
     * @param epsilon epsilon parameter value to be set
     */
    protected void set_epsilon(double epsilon) {
        epsilonSlider.setValue((int)(epsilon*epsilonSlider.getMaximum()));
    }

    @Override
    public TRMParameters get_TRMParameters() {
        PowerTrust_Parameters powerTrustParameters = new PowerTrust_Parameters();

        powerTrustParameters.set_powerNodesPercentage(get_powerNodesPercentage());
        powerTrustParameters.set_powerNodesWeight(get_powerNodesWeight());
        powerTrustParameters.set_epsilon(get_epsilon());

        return powerTrustParameters;
    }

    @Override
    public void set_TRMParameters(TRMParameters trmParameters) {
        PowerTrust_Parameters powerTrustParameters = (PowerTrust_Parameters)trmParameters;

        set_powerNodesPercentage(powerTrustParameters.get_powerNodesPercentage());
        set_powerNodesWeight(powerTrustParameters.get_powerNodesWeight());
        set_epsilon(powerTrustParameters.get_epsilon());
    }

    @Override
    public void setEnabled(boolean enabled) {
        powerNodesPercentageLabel.setEnabled(enabled);
        powerNodesPercentageSlider.setEnabled(enabled);
        powerNodesWeightLabel.setEnabled(enabled);
        powerNodesWeightSlider.setEnabled(enabled);
        epsilonLabel.setEnabled(enabled);
        epsilonSlider.setEnabled(enabled);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel epsilonLabel;
    private javax.swing.JSlider epsilonSlider;
    private javax.swing.JTextField epsilonTextField;
    private javax.swing.JLabel powerNodesPercentageLabel;
    private javax.swing.JSlider powerNodesPercentageSlider;
    private javax.swing.JTextField powerNodesPercentageTextField;
    private javax.swing.JLabel powerNodesWeightLabel;
    private javax.swing.JSlider powerNodesWeightSlider;
    private javax.swing.JTextField powerNodesWeightTextField;
    // End of variables declaration//GEN-END:variables
}