/**
 *  "TRMSim-WSN, Trust and Reputation Models Simulator for Wireless 
 * Sensor Networks" is free software: you can redistribute it and/or 
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of 
 * the License, or (at your option) any later version always keeping 
 * the additional terms specified in this license.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * 
 * Additional Terms of this License
 * --------------------------------
 * 
 * 1. It is Required the preservation of specified reasonable legal notices
 *   and author attributions in that material and in the Appropriate Legal
 *   Notices displayed by works containing it.
 * 
 * 2. It is limited the use for publicity purposes of names of licensors or
 *   authors of the material.
 * 
 * 3. It is Required indemnification of licensors and authors of that material
 *   by anyone who conveys the material (or modified versions of it) with
 *   contractual assumptions of liability to the recipient, for any liability
 *   that these contractual assumptions directly impose on those licensors
 *   and authors.
 * 
 * 4. It is Prohibited misrepresentation of the origin of that material, and it is
 *   required that modified versions of such material be marked in reasonable
 *   ways as different from the original version.
 * 
 * 5. It is Declined to grant rights under trademark law for use of some trade
 *   names, trademarks, or service marks.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program (lgpl.txt).  If not, see <http://www.gnu.org/licenses/>
*/

package es.ants.felixgm.trmsim_wsn.gui.parameterpanels;

import es.ants.felixgm.trmsim_wsn.trm.TRMParameters;
import es.ants.felixgm.trmsim_wsn.trm.eigentrust.EigenTrust_Parameters;

/**
 * <p>This class represents the panel used to retrieve the parameters of EigenTrust</p>
 * @author <a href="http://ants.dif.um.es/~felixgm/en" target="_blank">F&eacute;lix G&oacute;mez M&aacute;rmol</a>, <a href="http://webs.um.es/gregorio" target="_blank">Gregorio Mart&iacute;nez P&eacute;rez</a> and Antonio Bern&aacute;rdez
 * @version 0.2
 * @since 0.2
 */
public class EigenTrust_ParametersPanel extends TRMParametersPanel {
    
    /** 
     * Creates new form EigenTrust_ParametersPanel
     */
    public EigenTrust_ParametersPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        windowSizeLabel = new javax.swing.JLabel();
        windowSizeSpinner = new javax.swing.JSpinner();
        preTrustedPeersPercentageLabel = new javax.swing.JLabel();
        preTrustedPeersPercentageSlider = new javax.swing.JSlider();
        preTrustedPeersPercentageTextField = new javax.swing.JTextField();
        epsilonTextField = new javax.swing.JTextField();
        epsilonSlider = new javax.swing.JSlider();
        epsilonLabel = new javax.swing.JLabel();
        zeroTrustNodeSelectionProbabilityTextField = new javax.swing.JTextField();
        zeroTrustNodeSelectionProbabilitySlider = new javax.swing.JSlider();
        zeroTrustNodeSelectionProbabilityLabel = new javax.swing.JLabel();
        preTrustedPeersWeightSlider = new javax.swing.JSlider();
        preTrustedPeersWeightLabel = new javax.swing.JLabel();
        preTrustedPeersWeightTextField = new javax.swing.JTextField();

        windowSizeLabel.setText("Window size");
        windowSizeLabel.setEnabled(false);

        windowSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(5,1,Integer.MAX_VALUE,1));
        windowSizeSpinner.setEnabled(false);
        windowSizeSpinner.setFocusable(false);
        windowSizeSpinner.setPreferredSize(new java.awt.Dimension(140, 25));

        preTrustedPeersPercentageLabel.setText("Pre-Trusted Peers Percentage ");
        preTrustedPeersPercentageLabel.setEnabled(false);

        preTrustedPeersPercentageSlider.setMaximum(10000);
        preTrustedPeersPercentageSlider.setValue(1000);
        preTrustedPeersPercentageSlider.setEnabled(false);
        preTrustedPeersPercentageSlider.setPreferredSize(new java.awt.Dimension(140, 25));
        preTrustedPeersPercentageSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                preTrustedPeersPercentageSliderStateChanged(evt);
            }
        });

        preTrustedPeersPercentageTextField.setEditable(false);
        preTrustedPeersPercentageTextField.setText("0.1000");
        preTrustedPeersPercentageTextField.setPreferredSize(new java.awt.Dimension(45, 25));

        epsilonTextField.setEditable(false);
        epsilonTextField.setText("0.1000");
        epsilonTextField.setPreferredSize(new java.awt.Dimension(45, 25));

        epsilonSlider.setMaximum(10000);
        epsilonSlider.setValue(1000);
        epsilonSlider.setEnabled(false);
        epsilonSlider.setPreferredSize(new java.awt.Dimension(140, 25));
        epsilonSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                epsilonSliderStateChanged(evt);
            }
        });

        epsilonLabel.setText("Epsilon");
        epsilonLabel.setEnabled(false);

        zeroTrustNodeSelectionProbabilityTextField.setEditable(false);
        zeroTrustNodeSelectionProbabilityTextField.setText("0.1000");
        zeroTrustNodeSelectionProbabilityTextField.setPreferredSize(new java.awt.Dimension(45, 25));

        zeroTrustNodeSelectionProbabilitySlider.setMaximum(10000);
        zeroTrustNodeSelectionProbabilitySlider.setValue(1000);
        zeroTrustNodeSelectionProbabilitySlider.setEnabled(false);
        zeroTrustNodeSelectionProbabilitySlider.setPreferredSize(new java.awt.Dimension(140, 25));
        zeroTrustNodeSelectionProbabilitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zeroTrustNodeSelectionProbabilitySliderStateChanged(evt);
            }
        });

        zeroTrustNodeSelectionProbabilityLabel.setText("Zero Trust Node Selection Probability");
        zeroTrustNodeSelectionProbabilityLabel.setEnabled(false);

        preTrustedPeersWeightSlider.setMaximum(10000);
        preTrustedPeersWeightSlider.setValue(1000);
        preTrustedPeersWeightSlider.setEnabled(false);
        preTrustedPeersWeightSlider.setPreferredSize(new java.awt.Dimension(140, 25));
        preTrustedPeersWeightSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                preTrustedPeersWeightSliderStateChanged(evt);
            }
        });

        preTrustedPeersWeightLabel.setText(" Pre-Trusted Peers Weight");
        preTrustedPeersWeightLabel.setEnabled(false);

        preTrustedPeersWeightTextField.setEditable(false);
        preTrustedPeersWeightTextField.setText("0.1000");
        preTrustedPeersWeightTextField.setPreferredSize(new java.awt.Dimension(45, 25));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(preTrustedPeersPercentageLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(preTrustedPeersPercentageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(preTrustedPeersPercentageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(windowSizeLabel)
                    .addComponent(windowSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preTrustedPeersWeightLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(preTrustedPeersWeightSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(preTrustedPeersWeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(epsilonLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(epsilonSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(epsilonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(zeroTrustNodeSelectionProbabilityLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(zeroTrustNodeSelectionProbabilitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zeroTrustNodeSelectionProbabilityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(windowSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(windowSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(preTrustedPeersPercentageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(preTrustedPeersPercentageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preTrustedPeersPercentageSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(preTrustedPeersWeightLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(preTrustedPeersWeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preTrustedPeersWeightSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(epsilonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(epsilonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(epsilonSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(zeroTrustNodeSelectionProbabilityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(zeroTrustNodeSelectionProbabilityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zeroTrustNodeSelectionProbabilitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void preTrustedPeersPercentageSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_preTrustedPeersPercentageSliderStateChanged
        preTrustedPeersPercentageTextField.setText(String.valueOf(preTrustedPeersPercentageSlider.getValue()/(double)preTrustedPeersPercentageSlider.getMaximum()));
}//GEN-LAST:event_preTrustedPeersPercentageSliderStateChanged

    private void epsilonSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_epsilonSliderStateChanged
        epsilonTextField.setText(String.valueOf(epsilonSlider.getValue()/(double)epsilonSlider.getMaximum()));
}//GEN-LAST:event_epsilonSliderStateChanged

    private void zeroTrustNodeSelectionProbabilitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zeroTrustNodeSelectionProbabilitySliderStateChanged
        zeroTrustNodeSelectionProbabilityTextField.setText(String.valueOf(zeroTrustNodeSelectionProbabilitySlider.getValue()/(double)zeroTrustNodeSelectionProbabilitySlider.getMaximum()));
}//GEN-LAST:event_zeroTrustNodeSelectionProbabilitySliderStateChanged

    private void preTrustedPeersWeightSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_preTrustedPeersWeightSliderStateChanged
        preTrustedPeersWeightTextField.setText(String.valueOf(preTrustedPeersWeightSlider.getValue()/(double)preTrustedPeersWeightSlider.getMaximum()));
}//GEN-LAST:event_preTrustedPeersWeightSliderStateChanged
   
    /**
     * Retrieves windowSize parameter from its corresponding field in the panel
     * @return windowSize parameter
     */
    protected int get_windowSize() {
        return ((Integer)windowSizeSpinner.getValue());
    }    
    
    /**
     * Sets windowSize parameter into its corresponding field in the panel
     * @param windowSize windowSize parameter value to be set
     */
    protected void set_windowSize(int windowSize) {
        windowSizeSpinner.setValue(windowSize);
    }

    /**
     * Retrieves preTrustedPeersPercentage parameter from its corresponding field in the panel
     * @return preTrustedPeersPercentage parameter
     */
    protected double get_preTrustedPeersPercentage() {
        return Double.valueOf(preTrustedPeersPercentageTextField.getText());
    }

    /**
     * Sets preTrustedPeersPercentage parameter into its corresponding field in the panel
     * @param preTrustedPeersPercentage percentagePreTrustedPeers parameter value to be set
     */
    protected void set_preTrustedPeersPercentage(double preTrustedPeersPercentage) {
        preTrustedPeersPercentageSlider.setValue((int)(preTrustedPeersPercentage*preTrustedPeersPercentageSlider.getMaximum()));
    }

    /**
     * Retrieves preTrustedPeersWeight parameter from its corresponding field in the panel
     * @return preTrustedPeersWeight parameter
     */
    protected double get_preTrustedPeersWeight() {
        return Double.valueOf(preTrustedPeersWeightTextField.getText());
    }

    /**
     * Sets preTrustedPeersWeight parameter into its corresponding field in the panel
     * @param preTrustedPeersWeight percentagePreTrustedPeers parameter value to be set
     */
    protected void set_preTrustedPeersWeight(double preTrustedPeersWeight) {
        preTrustedPeersWeightSlider.setValue((int)(preTrustedPeersWeight*preTrustedPeersWeightSlider.getMaximum()));
    }

    /**
     * Retrieves epsilon parameter from its corresponding field in the panel
     * @return epsilon parameter
     */
    protected double get_epsilon() {
        return Double.valueOf(epsilonTextField.getText());
    }

    /**
     * Sets epsilon parameter into its corresponding field in the panel
     * @param epsilon epsilon parameter value to be set
     */
    protected void set_epsilon(double epsilon) {
        epsilonSlider.setValue((int)(epsilon*epsilonSlider.getMaximum()));
    }

    /**
     * Retrieves zeroTrustNodeSelectionProbability parameter from its corresponding field in the panel
     * @return zeroTrustNodeSelectionProbability parameter
     */
    protected double get_zeroTrustNodeSelectionProbability() {
        return Double.valueOf(zeroTrustNodeSelectionProbabilityTextField.getText());
    }

    /**
     * Sets zeroTrustNodeSelectionProbability parameter into its corresponding field in the panel
     * @param zeroTrustNodeSelectionProbability zeroTrustNodeSelectionProbability parameter value to be set
     */
    protected void set_zeroTrustNodeSelectionProbability(double zeroTrustNodeSelectionProbability) {
        zeroTrustNodeSelectionProbabilitySlider.setValue((int)(zeroTrustNodeSelectionProbability*zeroTrustNodeSelectionProbabilitySlider.getMaximum()));
    }

    @Override
    public TRMParameters get_TRMParameters() {
        EigenTrust_Parameters eigenTrustParameters = new EigenTrust_Parameters();

        eigenTrustParameters.set_windowSize(get_windowSize());
        eigenTrustParameters.set_preTrustedPeersPercentage(get_preTrustedPeersPercentage());
        eigenTrustParameters.set_preTrustedPeersWeight(get_preTrustedPeersWeight());
        eigenTrustParameters.set_epsilon(get_epsilon());
        eigenTrustParameters.set_zeroTrustNodeSelectionProbability(get_zeroTrustNodeSelectionProbability());
        
        return eigenTrustParameters;
    }

    @Override
    public void set_TRMParameters(TRMParameters trmParameters) {
        EigenTrust_Parameters eigenTrustParameters = (EigenTrust_Parameters)trmParameters;

        set_windowSize(eigenTrustParameters.get_windowSize());
        set_preTrustedPeersPercentage(eigenTrustParameters.get_preTrustedPeersPercentage());
        set_preTrustedPeersWeight(eigenTrustParameters.get_preTrustedPeersWeight());
        set_epsilon(eigenTrustParameters.get_epsilon());
        set_zeroTrustNodeSelectionProbability(eigenTrustParameters.get_zeroTrustNodeSelectionProbability());
    }

    @Override
    public void setEnabled(boolean enabled) {
        windowSizeLabel.setEnabled(enabled);
        windowSizeSpinner.setEnabled(enabled);
        preTrustedPeersPercentageLabel.setEnabled(enabled);
        preTrustedPeersPercentageSlider.setEnabled(enabled);
        preTrustedPeersWeightLabel.setEnabled(enabled);
        preTrustedPeersWeightSlider.setEnabled(enabled);
        epsilonLabel.setEnabled(enabled);
        epsilonSlider.setEnabled(enabled);
        zeroTrustNodeSelectionProbabilityLabel.setEnabled(enabled);
        zeroTrustNodeSelectionProbabilitySlider.setEnabled(enabled);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel epsilonLabel;
    private javax.swing.JSlider epsilonSlider;
    private javax.swing.JTextField epsilonTextField;
    private javax.swing.JLabel preTrustedPeersPercentageLabel;
    private javax.swing.JSlider preTrustedPeersPercentageSlider;
    private javax.swing.JTextField preTrustedPeersPercentageTextField;
    private javax.swing.JLabel preTrustedPeersWeightLabel;
    private javax.swing.JSlider preTrustedPeersWeightSlider;
    private javax.swing.JTextField preTrustedPeersWeightTextField;
    private javax.swing.JLabel windowSizeLabel;
    private javax.swing.JSpinner windowSizeSpinner;
    private javax.swing.JLabel zeroTrustNodeSelectionProbabilityLabel;
    private javax.swing.JSlider zeroTrustNodeSelectionProbabilitySlider;
    private javax.swing.JTextField zeroTrustNodeSelectionProbabilityTextField;
    // End of variables declaration//GEN-END:variables
    
}
